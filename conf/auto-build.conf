debug = 0
checkout-source = 1
nice-level = 20
control-file = rollingbuild.sh

# Force abortion of build when a module fails
# Not usually needed since builder is clever
# enough to skip a module if a dependency fails
abort-on-fail = 0

# Hostname, if different from that returned by 'hostname' command
# hostname = builder.example.com

tmp-dir = /var/tmp

lock = {
  file = /var/builder/.build.mutex
  use-flock = 1
}

build = {
  # This is where we check out the source to (for CVS anyway).
  home = /var/builder/build-home

  # ./configure --prefix=$AUTO_BUILD_ROOT/usr
  root = /var/builder/build-root
  
  # Cache packages which don't change
  cache-dir = /var/builder/build-cache
  cache = 1
  cache-timestamp = 1
}

# Module groups (for web status)
groups = {
  software = {
      label = Software
  }
#  docs = {
#      label = Documentation
#  }
}

# Global environment variables
env = {
  USER = builder
}

# Code repositories
repositories = {
#  p4 = {
#    label = Perl Perforce Server
#    module = Test::AutoBuild::Repository::Perforce
#    env = {
#      P4CONFIG = /var/builder/.p4config
#    }
#    options = {
#      force-refresh = false
#    }
#  }
  cvs = {
    label = GNA Anonymous CVS Server
    module = Test::AutoBuild::Repository::CVS
    env = {
      CVSROOT = :pserver:anonymous@cvs.gna.org:/cvs/testautobuild
    }
  }
#  arch = {
#    label = GNU Arch 
#    module = Test::AutoBuild::Repository::GNUArch
#    options = {
#     archive-name = lord@emf.net--2004
#     archive-uri = http://arch.quackerhead.com/~lord/archives/lord@emf.net--2004
#    }
#  }
}

# The various package types to distribute
package-types = {
  rpm = {
    label = Linux RPMs
    spool = /var/builder/packages/rpm
    extension = .rpm
  }
  pkg = {
    label = Solaris packages
    spool = /var/builder/packages/pkg
    extension = .pkg
  }
  zip = {
    label = ZIP packages
    spool = /var/builder/packages/zip
    extension = .zip
  }
  tgz = {
    label = Tar+GZip packages
    spool = /var/builder/packages/tar
    extension = .tar.gz
  }
  deb = {
    label = Debian Packages
    spool = /var/builder/packages/debian
    extension = .deb
  }
}

publishers = {
  copy = {
    label = File Copier
    module = Test::AutoBuild::Publisher::Copy
  }
}

# List of modules to checkout of CVS
modules = {
  autobuild-dev = {
    label = Test AutoBuild Unstable
    paths = (
       testautobuild:HEAD
    )
    repository = cvs
    group = software
    links = (
      {
        href = http://www.autobuild.org/
        label = Homepage
      }
    )
    artifacts = (
      {
        src = README
        dst = README
        label = Readme
        publisher = copy
      }
    )
  }
# Example using GNU Arch repository
#  tla-dev = {
#    label = GNU Arch 1.2
#    paths = (
#      lord@emf.net--2004/tla--devo--1.2
#    )
#    repository = arch
#    group = software
#  }
#
# Example using Perforce repository
#  core = {
#    label = CCM Core
    # NB, no need for the leading //, or trailing ...
    # the first component in the destination is the client name 
#    paths = (
#      /apps/build/core/dev -> /builder-client/core-dev
#      /core-platform/dev -> /builder-client/core-dev/core
#    )
#    repository = perforce
#    group = software
#  }
}

# What to do when we finish a run
output = {
  # Send an email alert on failure
#  email = {
#    module = Test::AutoBuild::Output::EmailAlert
#    label = Email Alerts
#    options = {
#      template-dir = /etc/auto-build.d/templates
#      url = http://www.example.com/~builder
#      addresses = developers@example.com
#      smtp_server = mail.example.com
#      sender = builder@example.com
#      send-on-success = false
#    }
#  }
  # Copy files to a ftp site
  ftp = {
    module = Test::AutoBuild::Output::PackageCopier
    label = FTP Site
    options = {
      directory = /var/builder/public_ftp
    }
  }
  # Copy files to a HTTP site
  http = {
    module = Test::AutoBuild::Output::PackageCopier
    label = Web Distribution Site
    options = {
      directory = /var/builder/public_html/dist
    }
  }
  # Copy logs to HTTP site
  log = {
    module = Test::AutoBuild::Output::LogCopier
    label = Build Log Files
    options = {
      directory = /var/builder/public_html/logs
    }
  }
  # Copy artifacts to HTTP site
  artifacts = {
    module = Test::AutoBuild::Output::ArtifactCopier
    label = Build Artifacts
    options = {
      directory = /var/builder/public_html/artifacts/%m
    }
  }
  # Create an ISO image containing several modules
  iso = {
    module = Test::AutoBuild::Output::ISOBuilder
    label = CD ISO image builder
    options = {
      variables = {
        httppath = /~builder
        defaultCSS = bluecurve.css
        adminEmail = admin@builder.example.com
        adminName = Build Administrator
        title = Continuous Automatic Builder
      }
      scratch-dir = /var/tmp
      iso-dest-dir = /var/builder/public_html/isos
      template-dest-dir = /var/builder/public_html
      template-src-dir = /etc/auto-build.d/templates
      files = (
          index-iso.html
      )
      images = {
        autobuild-unstable = {
          name = autobuild-unstable.iso
          label = Test-AutoBuild Unstable
          package-types = (
            rpm
            zip
          )
          modules = (
            autobuild-dev
          )
        }
      }
    }
  }
  
  # Generate HTML status pages
  status = {
    module = Test::AutoBuild::Output::HTMLStatus
    label = Web Status Site
    options = {
      variables = {
        httppath = /~builder
        defaultCSS = bluecurve.css
        adminEmail = admin@builder.example.com
        adminName = Build Administrator
        title = Continuous Automatic Builder
      }
      template-src-dir = /etc/auto-build.d/templates
      template-dest-dir = /var/builder/public_html
# Placeholders in file names are:
#  %m -> module name
#  %g -> group
#  %r -> repository
#  %p -> package type
      files = (
         {
           src = index-group.html
           dst = index.html
         }
         index-module.html
         index-repository.html
         {
           src = module.html
           dst = module-%m.html
         }
         index.rss
         bluecurve.css
         redhat.css
      )
    }
  }
}

# End of file
